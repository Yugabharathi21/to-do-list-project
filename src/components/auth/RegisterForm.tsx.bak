import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z                   <button
              type="button"
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground dark:text-gray-500 dark:hover:text-gray-300 transition-colors focus:outline-none"   <button
              type="button"
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground dark:text-gray-500 dark:hover:text-gray-300 transition-colors focus:outline-none"
              onClick={() => setShowPassword(!showPassword)}
            >
              {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
            </button>'zod';
import { Eye, EyeOff, Loader2, Mail, User, LockIcon } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { authAPI } from '@/lib/api';
import { useAuthStore } from '@/lib/store';
import { toast } from 'sonner';
import { cn } from '@/lib/utils';

const registerSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email address'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
});

type RegisterFormData = z.infer<typeof registerSchema>;

interface RegisterFormProps {
  onToggleMode: () => void;
}

export function RegisterForm({ onToggleMode }: RegisterFormProps) {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [error, setError] = useState<string>('');
  const { setAuth } = useAuthStore();

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<RegisterFormData>({
    resolver: zodResolver(registerSchema),
  });

  const onSubmit = async (data: RegisterFormData) => {
    try {
      setError('');
      
      const { confirmPassword, ...registrationData } = data;
      
      const response = await authAPI.register(registrationData);
      const { token, user } = response.data;
      
      setAuth(user, token);
      toast.success('Account created successfully!');
      
    } catch (error: any) {
      const errorMessage = error.response?.data?.message || 'Registration failed. Please try again.';
      setError(errorMessage);
    }
  };

  return (
    <div className="space-y-4">
      {error && (
        <Alert variant="destructive" className="bg-destructive/5 dark:bg-destructive/20 border-destructive/30 text-destructive dark:text-destructive-foreground dark:border-destructive/50 rounded-sm py-2">
          <AlertDescription className="font-body text-sm">{error}</AlertDescription>
        </Alert>
      )}

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="name" className="text-sm font-medium font-body block text-foreground">
            Name
          </Label>
          <div className="relative">
            <User className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              id="name"
              placeholder="Your name"
              autoComplete="name"
              {...register('name')}
              className={cn(
                "pl-10 h-10 font-body bg-transparent dark:bg-gray-800/90 border-border/60 dark:border-border/40",
                "focus:border-primary/70 focus:ring-1 focus:ring-primary/30 dark:focus:ring-primary/50",
                "hover:border-primary/40 hover:bg-background/60 dark:hover:bg-gray-700/90",
                "rounded-sm transition-all duration-300 dark:text-gray-200 placeholder:dark:text-gray-500",
                errors.name && "border-destructive/50 focus:border-destructive/50 focus:ring-destructive/20"
              )}
            />
          </div>
          {errors.name && (
            <p className="text-destructive text-xs mt-1 font-body">{errors.name.message}</p>
          )}
        </div>

        <div className="space-y-2">
          <Label htmlFor="register-email" className="text-sm font-medium font-body block text-foreground">
            Email
          </Label>
          <div className="relative">
            <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              id="register-email"
              type="email"
              placeholder="your.email@example.com"
              autoComplete="email"
              {...register('email')}
              className={cn(
                "pl-10 h-10 font-body bg-transparent dark:bg-gray-800/90 border-border/60 dark:border-border/40",
                "focus:border-primary/70 focus:ring-1 focus:ring-primary/30 dark:focus:ring-primary/50",
                "hover:border-primary/40 hover:bg-background/60 dark:hover:bg-gray-700/90",
                "rounded-sm transition-all duration-300 dark:text-gray-200 placeholder:dark:text-gray-500",
                errors.email && "border-destructive/50 focus:border-destructive/50 focus:ring-destructive/20"
              )}
            />
          </div>
          {errors.email && (
            <p className="text-destructive text-xs mt-1 font-body">{errors.email.message}</p>
          )}
        </div>

        <div className="space-y-2">
          <Label htmlFor="register-password" className="text-sm font-medium font-body block text-foreground">
            Password
          </Label>
          <div className="relative">
            <LockIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              id="register-password"
              type={showPassword ? 'text' : 'password'}
              placeholder="••••••••"
              autoComplete="new-password"
              {...register('password')}
              className={cn(
                "pl-10 h-10 pr-10 font-body bg-transparent dark:bg-gray-800/90 border-border/60 dark:border-border/40",
                "focus:border-primary/70 focus:ring-1 focus:ring-primary/30 dark:focus:ring-primary/50",
                "hover:border-primary/40 hover:bg-background/60 dark:hover:bg-gray-700/90",
                "rounded-sm transition-all duration-300 dark:text-gray-200 placeholder:dark:text-gray-500",
                errors.password && "border-destructive/50 focus:border-destructive/50 focus:ring-destructive/20"
              )}
            />
            <button
              type="button"
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors"
              onClick={() => setShowPassword(!showPassword)}
            >
              {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
            </button>
          </div>
          {errors.password && (
            <p className="text-destructive text-xs mt-1 font-body">{errors.password.message}</p>
          )}
        </div>

        <div className="space-y-2">
          <Label htmlFor="confirm-password" className="text-sm font-medium font-body block text-foreground">
            Confirm Password
          </Label>
          <div className="relative">
            <LockIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              id="confirm-password"
              type={showConfirmPassword ? 'text' : 'password'}
              placeholder="••••••••"
              autoComplete="new-password"
              {...register('confirmPassword')}
              className={cn(
                "pl-10 h-10 pr-10 font-body bg-transparent dark:bg-gray-800/90 border-border/60 dark:border-border/40",
                "focus:border-primary/70 focus:ring-1 focus:ring-primary/30 dark:focus:ring-primary/50",
                "hover:border-primary/40 hover:bg-background/60 dark:hover:bg-gray-700/90",
                "rounded-sm transition-all duration-300 dark:text-gray-200 placeholder:dark:text-gray-500",
                errors.confirmPassword && "border-destructive/50 focus:border-destructive/50 focus:ring-destructive/20"
              )}
            />
            <button
              type="button"
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors"
              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
            >
              {showConfirmPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
            </button>
          </div>
          {errors.confirmPassword && (
            <p className="text-destructive text-xs mt-1 font-body">{errors.confirmPassword.message}</p>
          )}
        </div>

        <div className="flex items-center">
          <input 
            type="checkbox" 
            id="terms" 
            className="pro-checkbox h-4 w-4" 
            required
          />
          <label 
            htmlFor="terms" 
            className="ml-2 text-xs font-body text-muted-foreground"
          >
            I agree to the <a href="#" className="text-primary hover:underline">Terms of Service</a> and <a href="#" className="text-primary hover:underline">Privacy Policy</a>
          </label>
        </div>

        <Button
          type="submit"
          className="w-full h-10 bg-primary hover:bg-primary/90 text-primary-foreground font-body text-sm rounded-sm transition-all duration-300 relative overflow-hidden"
          disabled={isSubmitting}
        >
          {isSubmitting ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin mr-2" />
              Creating account...
            </>
          ) : (
            'Create Account'
          )}
        </Button>
      </form>
      
      {/* Sign in link */}
      <div className="pt-2 text-center border-t border-border/30 dark:border-border/20 mt-6">
        <p className="text-sm font-body text-muted-foreground dark:text-gray-400">
          Already have an account?{' '}
          <button
            type="button"
            onClick={onToggleMode}
            className="text-primary hover:text-primary/80 dark:text-primary/80 dark:hover:text-primary/60 hover:underline font-medium transition-colors"
          >
            Sign in
          </button>
        </p>
      </div>
    </div>
  );
}